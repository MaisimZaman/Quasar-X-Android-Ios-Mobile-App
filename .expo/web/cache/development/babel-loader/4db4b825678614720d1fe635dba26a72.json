{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\zmais\\\\OneDrive\\\\Desktop\\\\react-apps\\\\signal-chat\\\\screens\\\\Chat\\\\ChatScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useLayoutEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Avatar } from 'react-native-elements';\nimport { AntDesign, FontAwesome, Ionicons } from '@expo/vector-icons';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { StatusBar } from 'expo-status-bar';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScrollView, TextInput } from 'react-native-gesture-handler';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { auth, db } from \"../../services/firebase\";\nimport firebase from 'firebase';\nimport * as ImagePicker from 'expo-image-picker';\nimport TextPostCard from \"../../components/TextPostCard\";\nexport default function ChatScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var _route$params = route.params,\n      chatName = _route$params.chatName,\n      id = _route$params.id,\n      photo = _route$params.photo,\n      isDm = _route$params.isDm,\n      members = _route$params.members,\n      admin = _route$params.admin;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: chatName,\n      headerBackTitleVisible: true,\n      headerTitleAlgin: \"left\",\n      headerTitle: function headerTitle() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: \"row\",\n            alignItems: \"center\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: clickChatInfo,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }\n        }, React.createElement(Avatar, {\n          rounded: true,\n          source: {\n            uri: photo\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }\n        })), React.createElement(Text, {\n          style: {\n            color: \"black\",\n            marginLeft: 10,\n            fontWeight: \"700\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        }, chatName));\n      },\n      headerLeft: function headerLeft() {\n        return React.createElement(TouchableOpacity, {\n          style: {\n            marginLeft: 10\n          },\n          onPress: navigation.goBack,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }\n        }, React.createElement(AntDesign, {\n          name: \"arrowleft\",\n          size: 24,\n          color: \"black\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }\n        }));\n      },\n      headerRight: function headerRight() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            width: 80,\n            marginRight: 20\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }\n        }, React.createElement(TouchableOpacity, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }\n        }, React.createElement(FontAwesome, {\n          name: \"video-camera\",\n          size: 24,\n          color: \"black\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }\n        })), React.createElement(TouchableOpacity, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        }, React.createElement(Ionicons, {\n          name: \"call\",\n          size: 24,\n          color: \"black\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        })));\n      }\n    });\n  }, [navigation, messages]);\n\n  function sendPictureImage() {\n    var result, image, uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError, saveImageMessage;\n    return _regeneratorRuntime.async(function sendPictureImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            saveImageMessage = function _saveImageMessage(downloadURL) {\n              db.collection(\"chats\").doc(id).collection('messages').add({\n                isPicture: true,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                message: downloadURL,\n                displayName: auth.currentUser.displayName,\n                email: auth.currentUser.email,\n                photoURL: auth.currentUser.photoURL\n              });\n            };\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [1.7, 1],\n              quality: 1\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.cancelled) {\n              _context.next = 19;\n              break;\n            }\n\n            image = result.uri;\n            uri = image;\n            childPath = \"chat-images/\" + id + \"/\" + auth.currentUser.uid + \"/\" + Math.random().toString(36);\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 10:\n            response = _context.sent;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 13:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                saveImageMessage(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendMessage() {\n    Keyboard.dismiss();\n    db.collection('chats').doc(id).collection('messages').add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input,\n      displayName: auth.currentUser.displayName,\n      email: auth.currentUser.email,\n      photoURL: auth.currentUser.photoURL\n    });\n    setInput('');\n  }\n\n  useLayoutEffect(function () {\n    var unsubscribe = db.collection('chats').doc(id).collection('messages').orderBy('timestamp').onSnapshot(function (snapshot) {\n      return setMessages(snapshot.docs.map(function (doc) {\n        return {\n          id: doc.id,\n          data: doc.data()\n        };\n      }));\n    });\n    return unsubscribe;\n  }, [route]);\n\n  function clickChatInfo() {\n    if (isDm) {\n      navigation.navigate(\"Chat-Members\", {\n        navigation: navigation,\n        membersList: members,\n        isDms: true,\n        chatName: '',\n        chatId: id,\n        admin: auth.currentUser.uid,\n        photo: photo\n      });\n    } else {\n      navigation.navigate(\"Chat-Members\", {\n        navigation: navigation,\n        membersList: members,\n        isDms: false,\n        chatName: chatName,\n        chatId: id,\n        admin: admin,\n        photo: photo\n      });\n    }\n  }\n\n  function renderChatMessageOrImage(id, data) {\n    if (data.isPicture == true && data.message != '') {\n      return React.createElement(React.Fragment, null, React.createElement(Avatar, {\n        position: \"absolute\",\n        rounded: true,\n        bottom: -15,\n        right: -5,\n        size: 30,\n        source: {\n          uri: data.photoURL\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate(\"Chat-Image\", {\n            image: data.message\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          width: 200,\n          height: 118\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        source: {\n          uri: data.message\n        },\n        style: {\n          width: 200,\n          height: 118\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }\n      }))));\n    } else if (data.isSharePost == true) {\n      return React.createElement(React.Fragment, null, React.createElement(Avatar, {\n        position: \"absolute\",\n        rounded: true,\n        bottom: -15,\n        right: -5,\n        size: 30,\n        source: {\n          uri: data.photoURL\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: {\n          width: 230,\n          height: 300\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, React.createElement(TextPostCard, {\n        id: data.postInfo.id,\n        posterName: data.postInfo.posterName,\n        posterProfilePic: data.postInfo.posterProfilePic,\n        image: data.postInfo.image,\n        caption: data.postInfo.caption,\n        navigation: navigation,\n        email: data.postInfo.posterProfilePic.email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }\n      })));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(Avatar, {\n        position: \"absolute\",\n        rounded: true,\n        bottom: -15,\n        right: -5,\n        size: 30,\n        source: {\n          uri: data.photoURL\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: styles.reciverText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }\n      }, data.message));\n    }\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    style: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }\n  }), React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n    style: styles.container,\n    keyboardVerticalOffset: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, React.createElement(React.Fragment, null, React.createElement(ScrollView, {\n    contentContainerStyle: {\n      paddingTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, messages.map(function (_ref2) {\n    var id = _ref2.id,\n        data = _ref2.data;\n    return data.email === auth.currentUser.email ? React.createElement(View, {\n      key: id,\n      style: styles.reciver,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 33\n      }\n    }, renderChatMessageOrImage(id, data)) : React.createElement(View, {\n      key: id,\n      style: styles.sender,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 33\n      }\n    }, renderChatMessageOrImage(id, data));\n  })), React.createElement(View, {\n    style: styles.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: sendPictureImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 25\n    }\n  }, React.createElement(Avatar, {\n    source: {\n      uri: \"https://static.thenounproject.com/png/17840-200.png\"\n    },\n    style: {\n      width: 35,\n      height: 35\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 29\n    }\n  })), React.createElement(TextInput, {\n    value: input,\n    onChangeText: function onChangeText(text) {\n      return setInput(text);\n    },\n    onSubmitEditing: sendMessage,\n    placeholder: \"Message..\",\n    style: styles.textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 25\n    }\n  }), React.createElement(TouchableOpacity, {\n    disabled: input == \"\",\n    onPress: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, React.createElement(Ionicons, {\n    name: \"send\",\n    size: 24,\n    color: \"#2b68E6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 29\n    }\n  }))))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  footer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15\n  },\n  textInput: {\n    bottom: 0,\n    flex: 1,\n    marginRight: 15,\n    backgroundColor: \"#ECECEC\",\n    padding: 10,\n    color: \"grey\",\n    borderRadius: 30\n  },\n  reciverText: {\n    color: \"black\",\n    fontWeight: \"500\",\n    marginLeft: 10\n  },\n  senderText: {\n    color: \"white\",\n    fontWeight: \"500\",\n    marginLeft: 10,\n    marginBottom: 15\n  },\n  reciver: {\n    padding: 15,\n    backgroundColor: \"#ECECEC\",\n    alignSelf: \"flex-end\",\n    borderRadius: 20,\n    marginRight: 15,\n    marginBottom: 20,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  sender: {\n    padding: 15,\n    backgroundColor: \"#2B68E6\",\n    alignSelf: \"flex-start\",\n    borderRadius: 20,\n    margin: 15,\n    maxWidth: \"80%\",\n    position: \"relative\"\n  },\n  senderName: {\n    left: 10,\n    paddingRight: 10,\n    fontSize: 10,\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["C:/Users/zmais/OneDrive/Desktop/react-apps/signal-chat/screens/Chat/ChatScreen.js"],"names":["React","useLayoutEffect","useState","Avatar","AntDesign","FontAwesome","Ionicons","StatusBar","ScrollView","TextInput","auth","db","firebase","ImagePicker","TextPostCard","ChatScreen","navigation","route","params","chatName","id","photo","isDm","members","admin","input","setInput","messages","setMessages","setOptions","title","headerBackTitleVisible","headerTitleAlgin","headerTitle","flexDirection","alignItems","clickChatInfo","uri","color","marginLeft","fontWeight","headerLeft","goBack","headerRight","justifyContent","width","marginRight","sendPictureImage","saveImageMessage","downloadURL","collection","doc","add","isPicture","timestamp","firestore","FieldValue","serverTimestamp","message","displayName","currentUser","email","photoURL","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","cancelled","image","childPath","uid","Math","random","toString","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","taskError","on","sendMessage","Keyboard","dismiss","unsubscribe","orderBy","onSnapshot","docs","map","data","navigate","membersList","isDms","chatId","renderChatMessageOrImage","height","isSharePost","postInfo","posterName","posterProfilePic","caption","styles","reciverText","flex","backgroundColor","Platform","OS","container","paddingTop","reciver","sender","footer","text","textInput","StyleSheet","create","padding","bottom","borderRadius","senderText","marginBottom","alignSelf","maxWidth","position","margin","senderName","left","paddingRight","fontSize"],"mappings":"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","sourcesContent":["import React, {useLayoutEffect, useState} from 'react'\r\nimport { View, Text, StyleSheet, TouchableOpacity, TouchableWithoutFeedback, Image } from 'react-native'\r\nimport { Avatar } from 'react-native-elements'\r\nimport { AntDesign, FontAwesome, Ionicons } from '@expo/vector-icons'\r\nimport { SafeAreaView } from 'react-native'\r\nimport { StatusBar } from 'expo-status-bar'\r\nimport { KeyboardAvoidingView } from 'react-native'\r\nimport { Platform } from 'react-native'\r\nimport { ScrollView, TextInput } from 'react-native-gesture-handler'\r\nimport { Keyboard } from 'react-native'\r\nimport { auth, db } from '../../services/firebase'\r\nimport firebase from 'firebase'\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport TextPostCard from '../../components/TextPostCard'\r\n\r\n\r\n\r\nexport default function ChatScreen({ navigation, route}) {\r\n\r\n    const {chatName, id, photo, isDm, members, admin} = route.params\r\n\r\n    const [input, setInput] = useState(\"\")\r\n\r\n    const [messages, setMessages] = useState([])\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            title: chatName,\r\n            headerBackTitleVisible: true,\r\n            headerTitleAlgin: \"left\",\r\n            headerTitle: () => (\r\n                <View style={{\r\n                    flexDirection: \"row\",\r\n                    alignItems: \"center\",\r\n                }}>\r\n                    <TouchableOpacity onPress={clickChatInfo}>\r\n                        <Avatar rounded source={{\r\n                            uri: photo\r\n                        }}></Avatar>\r\n                    </TouchableOpacity>\r\n                    <Text\r\n                        style={{ color: \"black\", marginLeft: 10, fontWeight: \"700\"}}\r\n                    >{chatName}</Text>\r\n                </View>\r\n            ),\r\n\r\n            headerLeft: () => (\r\n                <TouchableOpacity\r\n                    style={{ marginLeft: 10}}\r\n                    onPress={navigation.goBack}\r\n                >\r\n                    <AntDesign name=\"arrowleft\" size={24} color=\"black\"></AntDesign>\r\n                </TouchableOpacity>\r\n            ),\r\n\r\n            headerRight: () => (\r\n                <View \r\n                    style={{\r\n                        flexDirection: \"row\",\r\n                        justifyContent: \"space-between\",\r\n                        width: 80,\r\n                        marginRight: 20,\r\n                    }}\r\n                >\r\n                    <TouchableOpacity>\r\n                        <FontAwesome name=\"video-camera\" size={24} color=\"black\"></FontAwesome>\r\n                    </TouchableOpacity>\r\n\r\n                    <TouchableOpacity>\r\n                        <Ionicons name=\"call\" size={24} color=\"black\"></Ionicons>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            )\r\n\r\n        })\r\n\r\n    }, [navigation, messages])\r\n\r\n\r\n    async function sendPictureImage(){\r\n    \r\n\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [1.7, 1],\r\n            quality: 1,\r\n            \r\n        });\r\n    \r\n        if (!result.cancelled) {\r\n            const image =   result.uri;\r\n            const uri = image;\r\n            const childPath = `chat-images/${id}/${auth.currentUser.uid}/${Math.random().toString(36)}`;\r\n        \r\n\r\n            const response = await fetch(uri);\r\n            const blob = await response.blob();\r\n\r\n            const task = firebase\r\n                .storage()\r\n                .ref()\r\n                .child(childPath)\r\n                .put(blob);\r\n\r\n            const taskProgress = snapshot => {\r\n                console.log(`transferred: ${snapshot.bytesTransferred}`)\r\n            }\r\n\r\n            const taskCompleted = () => {\r\n                task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n                \r\n                saveImageMessage(snapshot);\r\n                console.log(snapshot)\r\n            })\r\n            }\r\n\r\n            const taskError = snapshot => {\r\n                console.log(snapshot)\r\n            }\r\n\r\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\r\n        }\r\n\r\n\r\n        function saveImageMessage(downloadURL){\r\n            db.collection(\"chats\")\r\n            .doc(id)\r\n            .collection('messages')\r\n            .add({\r\n                isPicture: true,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: downloadURL,\r\n                displayName: auth.currentUser.displayName,\r\n                email: auth.currentUser.email,\r\n                photoURL: auth.currentUser.photoURL,\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    function sendMessage(){\r\n        Keyboard.dismiss()\r\n\r\n        db.collection('chats')\r\n        .doc(id)\r\n        .collection('messages')\r\n        .add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            displayName: auth.currentUser.displayName,\r\n            email: auth.currentUser.email,\r\n            photoURL: auth.currentUser.photoURL,\r\n        })\r\n\r\n        setInput('')\r\n\r\n\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        const unsubscribe = db.collection('chats')\r\n                            .doc(id).collection('messages')\r\n                            .orderBy('timestamp')\r\n                            .onSnapshot((snapshot) => setMessages(snapshot.docs.map(doc => ({\r\n                                id: doc.id,\r\n                                data: doc.data()\r\n                            }))))\r\n\r\n        return unsubscribe;\r\n    }, [route])\r\n\r\n\r\n    function clickChatInfo(){\r\n        if (isDm){\r\n            navigation.navigate(\"Chat-Members\", { navigation: navigation, membersList: members, isDms: true, chatName: '', chatId: id, admin: auth.currentUser.uid, photo: photo})\r\n        }\r\n\r\n        else {\r\n            navigation.navigate(\"Chat-Members\", { navigation: navigation, membersList: members, isDms: false, chatName: chatName, chatId: id, admin: admin, photo: photo})\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function renderChatMessageOrImage(id, data){\r\n        if (data.isPicture == true && data.message != ''){\r\n\r\n            \r\n\r\n            return (\r\n                <>\r\n                <Avatar \r\n                        position=\"absolute\"\r\n                        rounded\r\n                        bottom={-15}\r\n                        right={-5}\r\n                        size={30}\r\n                        source={{uri: data.photoURL}}\r\n                    ></Avatar>\r\n                <TouchableOpacity onPress={() => navigation.navigate(\"Chat-Image\", {image: data.message})}>\r\n\r\n                    <View style={{ width: 200, height: 118}}>\r\n                        <Image source={{uri: data.message}} style={{ width: 200, height: 118}}></Image>\r\n                    </View>\r\n                </TouchableOpacity>\r\n\r\n                </>\r\n\r\n            )\r\n            \r\n\r\n        }\r\n\r\n        else if (data.isSharePost == true){\r\n            return (\r\n                <>\r\n                <Avatar \r\n                        position=\"absolute\"\r\n                        rounded\r\n                        bottom={-15}\r\n                        right={-5}\r\n                        size={30}\r\n                        source={{uri: data.photoURL}}\r\n                ></Avatar>\r\n                <View style={{width: 230, height: 300}}>\r\n                    <TextPostCard\r\n                    id={data.postInfo.id}\r\n                    posterName={data.postInfo.posterName}\r\n                    posterProfilePic={data.postInfo.posterProfilePic}\r\n                    image={data.postInfo.image}\r\n                    caption={data.postInfo.caption}\r\n                    navigation={navigation}\r\n                    email={data.postInfo.posterProfilePic.email}\r\n\r\n                    />\r\n                </View>\r\n                </>\r\n            )\r\n        }\r\n\r\n        else {\r\n\r\n            return (\r\n                <>\r\n                <Avatar \r\n                    position=\"absolute\"\r\n                    rounded\r\n                    bottom={-15}\r\n                    right={-5}\r\n                    size={30}\r\n                    source={{uri: data.photoURL}}\r\n                ></Avatar>\r\n                <Text style={styles.reciverText}>{data.message}</Text>\r\n            </>\r\n\r\n            )\r\n            \r\n        \r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <SafeAreaView style={{ flex: 1, backgroundColor: \"white\"}}>\r\n            <StatusBar style=\"light\"></StatusBar>\r\n            \r\n            \r\n            \r\n            <KeyboardAvoidingView\r\n                behavior={Platform.OS === \"ios\" ? \"padding\": \"height\"}\r\n                style={styles.container}\r\n                keyboardVerticalOffset={100}\r\n            >\r\n                <>\r\n                    <ScrollView contentContainerStyle={{ paddingTop: 20}}>\r\n                        {messages.map(({id, data}) => (\r\n                            data.email === auth.currentUser.email ? (\r\n                                <View key={id} style={styles.reciver}>\r\n                                    {renderChatMessageOrImage(id, data)}\r\n                                </View>\r\n                                ): (\r\n                                <View key={id} style={styles.sender}>\r\n                                    {renderChatMessageOrImage(id, data)}\r\n                                </View>\r\n\r\n                            )\r\n                        ))}\r\n\r\n                    </ScrollView>\r\n\r\n                    <View style={styles.footer}>\r\n                        <TouchableOpacity onPress={sendPictureImage}>\r\n                            <Avatar source={{uri: \"https://static.thenounproject.com/png/17840-200.png\"}} style={{width: 35, height: 35}} />\r\n                        </TouchableOpacity>\r\n                        <TextInput \r\n                        value={input}\r\n                        onChangeText={(text) => setInput(text)}\r\n                        onSubmitEditing={sendMessage}\r\n                        placeholder=\"Message..\" \r\n                        style={styles.textInput}\r\n                        \r\n                        ></TextInput>\r\n\r\n                        <TouchableOpacity \r\n                        disabled={input == \"\"}\r\n                        onPress={sendMessage}\r\n                        >\r\n                            <Ionicons name=\"send\" size={24}  color=\"#2b68E6\"></Ionicons>\r\n\r\n                        </TouchableOpacity>\r\n\r\n                    </View>\r\n                </>\r\n                \r\n\r\n\r\n            </KeyboardAvoidingView>\r\n\r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n\r\n    },\r\n    footer: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        padding: 15\r\n    },\r\n    textInput: {\r\n        bottom: 0,\r\n        flex: 1,\r\n        marginRight: 15,\r\n        backgroundColor: \"#ECECEC\",\r\n        padding: 10,\r\n        color: \"grey\",\r\n        borderRadius: 30,\r\n\r\n    },\r\n\r\n    reciverText: {\r\n        color: \"black\",\r\n        fontWeight: \"500\",\r\n        marginLeft: 10,\r\n\r\n\r\n    },\r\n\r\n    senderText: {\r\n        color: \"white\",\r\n        fontWeight: \"500\",\r\n        marginLeft: 10,\r\n        marginBottom: 15,\r\n\r\n    },\r\n\r\n    reciver: {\r\n        padding: 15,\r\n        backgroundColor: \"#ECECEC\",\r\n        alignSelf: \"flex-end\",\r\n        borderRadius: 20,\r\n        marginRight: 15,\r\n        marginBottom: 20,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n\r\n    },\r\n\r\n    sender: {\r\n        padding: 15,\r\n        backgroundColor: \"#2B68E6\",\r\n        alignSelf: \"flex-start\",\r\n        borderRadius: 20,\r\n        margin: 15,\r\n        maxWidth: \"80%\",\r\n        position: \"relative\",\r\n\r\n    },\r\n\r\n    senderName: {\r\n        left: 10,\r\n        paddingRight: 10,\r\n        fontSize: 10,\r\n        color: \"white\",\r\n        \r\n\r\n    },\r\n\r\n    \r\n\r\n})\r\n"]},"metadata":{},"sourceType":"module"}