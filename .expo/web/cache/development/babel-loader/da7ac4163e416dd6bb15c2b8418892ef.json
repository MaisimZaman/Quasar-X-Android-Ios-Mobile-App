{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\zmais\\\\OneDrive\\\\Desktop\\\\react-apps\\\\signal-chat\\\\screens\\\\Chat\\\\ChatMembers.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { auth, db } from \"../../services/firebase\";\nimport { CardItem, Left, Thumbnail, Body } from 'native-base';\nimport { Text } from 'react-native-elements';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { Button, Input } from 'react-native-elements';\nimport * as firebase from 'firebase';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\nexport default function chatMembers(props) {\n  var _props$route$params = props.route.params,\n      navigation = _props$route$params.navigation,\n      membersList = _props$route$params.membersList,\n      isDms = _props$route$params.isDms,\n      chatName = _props$route$params.chatName,\n      chatId = _props$route$params.chatId,\n      photo = _props$route$params.photo;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userData = _useState2[0],\n      setUserData = _useState2[1];\n\n  var _useState3 = useState(chatName),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newchatName = _useState4[0],\n      setNewChatName = _useState4[1];\n\n  useEffect(function () {\n    var unsubscribe = db.collection('users').onSnapshot(function (snapshot) {\n      return setUserData(snapshot.docs.map(function (doc) {\n        return {\n          uid: doc.id,\n          data: doc.data()\n        };\n      }));\n    });\n    return unsubscribe;\n  }, []);\n\n  function updateGroupPhoto() {\n    var result, image, uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError, saveGroupImage;\n    return _regeneratorRuntime.async(function updateGroupPhoto$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            saveGroupImage = function _saveGroupImage(downloadURL) {\n              db.collection(\"chats\").doc(chatId).update({\n                groupPhoto: downloadURL\n              });\n            };\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [1.7, 1],\n              quality: 1\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.cancelled) {\n              _context.next = 19;\n              break;\n            }\n\n            image = result.uri;\n            uri = image;\n            childPath = \"group-chat-image/\" + chatId + \"/\" + Math.random().toString(36);\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 10:\n            response = _context.sent;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 13:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                saveGroupImage(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getUserData(uid) {\n    if (userData.length > 0) {\n      var Info = userData.filter(function (value) {\n        return value.uid == uid;\n      })[0].data;\n      return Info;\n    } else {\n      return 'null';\n    }\n  }\n\n  function renderPerson(userid, point) {\n    var thisInfo = getUserData(userid);\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate(\"Profile\", {\n          currentUser: thisInfo\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, React.createElement(CardItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, React.createElement(Left, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, React.createElement(Thumbnail, {\n      source: {\n        uri: thisInfo.photoURL\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }), React.createElement(Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      h4: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, thisInfo.displayName), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, thisInfo.email))))));\n  }\n\n  function rendermembers() {\n    return membersList.map(function (userId, index) {\n      return renderPerson(userId, index);\n    });\n  }\n\n  function renderAddMorePeople() {\n    if (!isDms) {\n      return React.createElement(View, {\n        style: {\n          paddingBottom: 20,\n          paddingTop: 20,\n          paddingLeft: 50,\n          paddingRight: 50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }\n      }, React.createElement(Button, {\n        title: \"Add more friends? \",\n        onPress: function onPress() {\n          return navigation.navigate(\"Add-More\", {\n            addedUsers: membersList,\n            chatName: chatName,\n            chatId: chatId\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  function updateChatName() {\n    db.collection(\"chats\").doc(chatId).update({\n      chatName: newchatName\n    });\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      displayName: auth.currentUser.displayName,\n      email: auth.currentUser.email,\n      message: \"changed the name to \" + newchatName,\n      photoURL: auth.currentUser.photoURL,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n  function editChatName() {\n    if (!isDms) {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, React.createElement(Input, {\n        placeholder: \"Update Chat Name\",\n        value: newchatName,\n        onChangeText: function onChangeText(text) {\n          return setNewChatName(text);\n        },\n        onSubmitEditing: updateChatName,\n        leftIcon: React.createElement(Icon, {\n          name: \"wechat\",\n          type: \"antdesign\",\n          size: 24,\n          color: \"black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }, React.createElement(Button, {\n        disabled: newchatName == '',\n        title: \"Update Chat Name\",\n        onPress: updateChatName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      })));\n    }\n  }\n\n  function renderLeaveButton() {\n    function deleteUser() {\n      db.collection(\"chats\").doc(chatId).update({\n        chatMembers: membersList.splice(membersList.indexOf(auth.currentUser.uid))\n      });\n      navigation.replace(\"Home\");\n    }\n\n    if (!isDms) {\n      return React.createElement(Button, {\n        title: \"Leave Chat\",\n        onPress: deleteUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  function renderGroupIcon() {\n    if (!isDms) {\n      return React.createElement(TouchableOpacity, {\n        onPress: updateGroupPhoto,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, React.createElement(Avatar, {\n        rounded: true,\n        style: {\n          height: 100,\n          width: 100\n        },\n        source: {\n          uri: photo\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, renderGroupIcon(), editChatName()), renderAddMorePeople(), React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, isDms ? 'Direct Messages with' : 'Group Members'), rendermembers()), renderLeaveButton());\n}\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/zmais/OneDrive/Desktop/react-apps/signal-chat/screens/Chat/ChatMembers.js"],"names":["React","useEffect","useState","ScrollView","auth","db","CardItem","Left","Thumbnail","Body","Text","Icon","Button","Input","firebase","ImagePicker","Avatar","chatMembers","props","route","params","navigation","membersList","isDms","chatName","chatId","photo","userData","setUserData","newchatName","setNewChatName","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","uid","id","data","updateGroupPhoto","saveGroupImage","downloadURL","update","groupPhoto","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","cancelled","image","uri","childPath","Math","random","toString","fetch","response","blob","task","storage","ref","child","put","taskProgress","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","taskError","on","getUserData","length","Info","filter","value","renderPerson","userid","point","thisInfo","navigate","currentUser","photoURL","displayName","email","rendermembers","userId","index","renderAddMorePeople","paddingBottom","paddingTop","paddingLeft","paddingRight","addedUsers","updateChatName","add","message","timestamp","firestore","FieldValue","serverTimestamp","editChatName","text","renderLeaveButton","deleteUser","splice","indexOf","replace","renderGroupIcon","height","width","flexDirection","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { StyleSheet, View, TouchableOpacity } from 'react-native'\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport { auth, db } from '../../services/firebase';\r\nimport { CardItem, Left, Thumbnail, Body } from 'native-base';\r\nimport { Text } from 'react-native-elements';\r\nimport  Icon  from 'react-native-vector-icons/FontAwesome' ;\r\nimport { Button, Input } from 'react-native-elements';\r\nimport * as firebase from 'firebase';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\r\n\r\n\r\nexport default function chatMembers(props) {\r\n\r\n    const {navigation, membersList, isDms, chatName, chatId, photo} = props.route.params;\r\n\r\n \r\n\r\n    const [userData, setUserData] = useState([])\r\n    const [newchatName, setNewChatName] = useState(chatName)\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('users')\r\n        .onSnapshot((snapshot) => setUserData(snapshot.docs.map(doc => ({\r\n            uid: doc.id,\r\n            data: doc.data()\r\n        }))))    \r\n\r\n        return unsubscribe\r\n    }, [])\r\n\r\n    async function updateGroupPhoto(){\r\n    \r\n\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [1.7, 1],\r\n            quality: 1,\r\n            \r\n        });\r\n    \r\n        if (!result.cancelled) {\r\n            const image =   result.uri;\r\n            const uri = image;\r\n            const childPath = `group-chat-image/${chatId}/${Math.random().toString(36)}`;\r\n        \r\n\r\n            const response = await fetch(uri);\r\n            const blob = await response.blob();\r\n\r\n            const task = firebase\r\n                .storage()\r\n                .ref()\r\n                .child(childPath)\r\n                .put(blob);\r\n\r\n            const taskProgress = snapshot => {\r\n                console.log(`transferred: ${snapshot.bytesTransferred}`)\r\n            }\r\n\r\n            const taskCompleted = () => {\r\n                task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n                \r\n                saveGroupImage(snapshot);\r\n                console.log(snapshot)\r\n            })\r\n            }\r\n\r\n            const taskError = snapshot => {\r\n                console.log(snapshot)\r\n            }\r\n\r\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\r\n        }\r\n\r\n\r\n        function saveGroupImage(downloadURL){\r\n            db.collection(\"chats\")\r\n            .doc(chatId)\r\n            .update({\r\n                groupPhoto: downloadURL\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    \r\n    function getUserData(uid){\r\n        if (userData.length > 0){\r\n            var Info = userData.filter(function(value){\r\n                return value.uid == uid\r\n            })[0].data\r\n\r\n            return Info\r\n        }\r\n        else {\r\n            return 'null'\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    \r\n\r\n    function renderPerson(userid, point){\r\n        \r\n\r\n        const thisInfo = getUserData(userid)\r\n    \r\n\r\n        return (\r\n            <View>\r\n                <TouchableOpacity\r\n                        onPress={() => navigation.navigate(\"Profile\", {\r\n                            currentUser: thisInfo\r\n                        })}>\r\n            <CardItem>\r\n        <Left>\r\n            <Thumbnail source={{uri: thisInfo.photoURL}} />\r\n\r\n            <Body>\r\n                \r\n                <Text h4>{thisInfo.displayName}</Text>\r\n                <Text>{thisInfo.email}</Text>\r\n            </Body>\r\n        </Left>\r\n        </CardItem>\r\n        </TouchableOpacity>\r\n        </View>\r\n        )\r\n\r\n\r\n    }\r\n\r\n   \r\n\r\n    function rendermembers(){\r\n\r\n        return (\r\n            membersList.map((userId, index) => {\r\n                return ( renderPerson(userId, index))  \r\n            })\r\n        )\r\n    }\r\n\r\n    function renderAddMorePeople(){\r\n        if (!isDms){\r\n            return (\r\n                <View style={{paddingBottom: 20, paddingTop: 20, paddingLeft: 50, paddingRight: 50}}>\r\n                    <Button  title=\"Add more friends? \" onPress={() => navigation.navigate(\"Add-More\", {\r\n                        addedUsers: membersList,\r\n                        chatName: chatName,\r\n                        chatId: chatId\r\n                    })}></Button>\r\n                </View>\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n    function updateChatName(){\r\n        db.collection(\"chats\")\r\n            .doc(chatId)\r\n            .update({\r\n                chatName: newchatName\r\n            })\r\n\r\n        db.collection(\"chats\")\r\n            .doc(chatId)\r\n            .collection(\"messages\")\r\n            .add({\r\n                displayName: auth.currentUser.displayName,\r\n                email: auth.currentUser.email,\r\n                message: \"changed the name to \" + newchatName,\r\n                photoURL: auth.currentUser.photoURL,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n\r\n            })\r\n            \r\n\r\n\r\n    }\r\n\r\n    function editChatName(){\r\n        if (!isDms){\r\n            return (\r\n                <View>\r\n                <Input \r\n                placeholder='Update Chat Name'\r\n                value={newchatName}\r\n                onChangeText={(text) => setNewChatName(text)}\r\n                onSubmitEditing={updateChatName}\r\n                leftIcon={\r\n                    <Icon name=\"wechat\" type=\"antdesign\" size={24} color=\"black\"/>\r\n                }/>\r\n\r\n                <View>\r\n                <Button disabled={newchatName==''} title=\"Update Chat Name\" onPress={updateChatName}></Button>\r\n                </View>\r\n                </View>\r\n                \r\n\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n    function renderLeaveButton(){\r\n        function deleteUser(){\r\n\r\n            //const UpdatedList = membersList.splice(membersList.indexOf(auth.currentUser.uid))\r\n            db.collection(\"chats\")\r\n                    .doc(chatId)\r\n                    .update({\r\n                        chatMembers: membersList.splice(membersList.indexOf(auth.currentUser.uid))\r\n                    })\r\n            navigation.replace(\"Home\")\r\n\r\n            \r\n\r\n            \r\n        }\r\n\r\n\r\n        if (!isDms){\r\n            return (\r\n                <Button title=\"Leave Chat\" onPress={deleteUser}></Button>\r\n            )\r\n        }\r\n    }\r\n\r\n    function renderGroupIcon(){\r\n        if (!isDms){\r\n            return (\r\n                <TouchableOpacity onPress={updateGroupPhoto}>\r\n                    <Avatar \r\n                    rounded\r\n                    style={{\r\n                        height: 100,\r\n                        width: 100\r\n                    }}\r\n                    source={{\r\n                        uri: photo\r\n                    }}\r\n                    />\r\n                </TouchableOpacity>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View>\r\n            <View style={{flexDirection: \"row\"}}>\r\n                {renderGroupIcon()}\r\n                {editChatName()}\r\n            </View>\r\n            {renderAddMorePeople()}\r\n            <ScrollView>\r\n                <Text h3>{isDms ? 'Direct Messages with' : 'Group Members'}</Text>\r\n                {rendermembers()}\r\n                \r\n            </ScrollView>\r\n            {renderLeaveButton()}\r\n            \r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({})\r\n"]},"metadata":{},"sourceType":"module"}