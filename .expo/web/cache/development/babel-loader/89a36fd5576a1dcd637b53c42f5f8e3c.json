{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\zmais\\\\OneDrive\\\\Desktop\\\\react-apps\\\\signal-chat\\\\screens\\\\Chat\\\\HomeScreen.js\";\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\nimport CustomListItem from \"../../components/CustomListItem\";\nimport { auth, db } from \"../../services/firebase\";\nimport { SimpleLineIcons } from '@expo/vector-icons';\nimport Button from \"react-native-web/dist/exports/Button\";\nexport default function HomeScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setUserInfo = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDms = _useState6[0],\n      setIsDms = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      userInfoLoaded = _useState8[0],\n      setUserInfoLoaded = _useState8[1];\n\n  useEffect(function () {\n    function unsubscribeDms() {\n      db.collection('chats').onSnapshot(function (snapshot) {\n        snapshot.docs.map(function (doc) {\n          if (doc.data().isDM) {\n            if (doc.data().users[0] == auth.currentUser.uid) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data(),\n                  otherUser: doc.data().users[1]\n                }]);\n              });\n            } else if (doc.data().users[1] == auth.currentUser.uid) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data(),\n                  otherUser: doc.data().users[0]\n                }]);\n              });\n            }\n          }\n        });\n      });\n      db.collection('users').onSnapshot(function (snapshot) {\n        return setUserInfo(snapshot.docs.map(function (doc) {\n          return {\n            uid: doc.id,\n            data: doc.data()\n          };\n        }));\n      });\n    }\n\n    function unsubscribeGcs() {\n      db.collection('chats').onSnapshot(function (snapshot) {\n        snapshot.docs.map(function (doc) {\n          if (!doc.data().isDM) {\n            var allUsers = doc.data().chatMembers;\n\n            if (allUsers.includes(auth.currentUser.uid)) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data()\n                }]);\n              });\n            }\n          }\n        });\n      });\n    }\n\n    if (isDms) {\n      unsubscribeDms();\n    } else {\n      unsubscribeGcs();\n    }\n  }, [isDms]);\n\n  function getphotoUrl(uid) {\n    if (userInfo.length > 0) {\n      var picInfo = userInfo.filter(function (value) {\n        return value.uid == uid;\n      })[0].data.photoURL;\n      return picInfo;\n    } else {\n      return 'null';\n    }\n  }\n\n  function getDisplayName(uid) {\n    if (userInfo.length > 0) {\n      var nameInfo = userInfo.filter(function (value) {\n        return value.uid == uid;\n      })[0].data.displayName;\n      console.log(\"this is the display name\" + nameInfo);\n      return nameInfo;\n    } else {\n      return 'null';\n    }\n  }\n\n  function signOutUser() {\n    auth.signOut().then(function () {\n      navigation.replace('Login');\n    });\n  }\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: \"Chats\",\n      headerRight: function headerRight() {\n        var _auth$currentUser;\n\n        return React.createElement(View, {\n          style: {\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            width: 80,\n            marginRight: 20\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: {\n            marginLeft: 20\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"Profile\", {\n              currentUser: auth.currentUser\n            });\n          },\n          activeOpacity: 0.5,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 21\n          }\n        }, React.createElement(Avatar, {\n          rounded: true,\n          source: {\n            uri: auth == null ? void 0 : (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.photoURL\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }\n        }))), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"AddChat\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }\n        }, React.createElement(SimpleLineIcons, {\n          name: \"pencil\",\n          size: 24,\n          color: \"black\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }\n        })));\n      }\n    });\n  }, [navigation]);\n\n  function enterChat(id, chatName, photo, isDm, members, admin) {\n    navigation.navigate(\"Chat\", {\n      id: id,\n      chatName: chatName,\n      photo: photo,\n      isDm: isDm,\n      members: members,\n      admin: admin\n    });\n  }\n\n  function switchChat() {\n    if (isDms) {\n      setChats([]);\n      setIsDms(false);\n    } else {\n      setChats([]);\n      setIsDms(true);\n    }\n  }\n\n  function chatTypeLogic() {\n    var _this2 = this;\n\n    if (isDms) {\n      return chats.map(function (_ref2) {\n        var id = _ref2.id,\n            data = _ref2.data,\n            otherUser = _ref2.otherUser;\n        return React.createElement(CustomListItem, {\n          key: id,\n          id: id,\n          enterChat: enterChat,\n          photo: getphotoUrl(otherUser),\n          userName: getDisplayName(otherUser),\n          isDM: true,\n          members: [auth.currentUser.uid, otherUser],\n          admin: auth.currentUser.uid,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }\n        });\n      });\n    } else {\n      return chats.map(function (_ref3) {\n        var id = _ref3.id,\n            data = _ref3.data;\n        return React.createElement(CustomListItem, {\n          id: id,\n          enterChat: enterChat,\n          photo: data.groupPhoto != undefined ? data.groupPhoto : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ4apNLOP0befEKu609F8yvMt_f-f7DVjNElhfMU2svKwmHjTCv7l-FNuor2rnCw33By5s&usqp=CAU\",\n          userName: data.chatName,\n          isDM: false,\n          members: data.chatMembers,\n          admin: data.admin,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 21\n          }\n        });\n      });\n    }\n  }\n\n  function ButtonName() {\n    if (isDms) {\n      return \"Groups chats\";\n    } else {\n      return \"Direct Messages\";\n    }\n  }\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: ButtonName(),\n    onPress: switchChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }), React.createElement(ScrollView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, chatTypeLogic()));\n}\nvar styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/zmais/OneDrive/Desktop/react-apps/signal-chat/screens/Chat/HomeScreen.js"],"names":["React","useEffect","useLayoutEffect","useState","Avatar","CustomListItem","auth","db","SimpleLineIcons","HomeScreen","navigation","chats","setChats","userInfo","setUserInfo","isDms","setIsDms","userInfoLoaded","setUserInfoLoaded","unsubscribeDms","collection","onSnapshot","snapshot","docs","map","doc","data","isDM","users","currentUser","uid","id","otherUser","unsubscribeGcs","allUsers","chatMembers","includes","getphotoUrl","length","picInfo","filter","value","photoURL","getDisplayName","nameInfo","displayName","console","log","signOutUser","signOut","then","replace","setOptions","title","headerRight","flexDirection","justifyContent","width","marginRight","marginLeft","navigate","uri","enterChat","chatName","photo","isDm","members","admin","switchChat","chatTypeLogic","groupPhoto","undefined","ButtonName","styles","container","StyleSheet","create","height"],"mappings":"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","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react'\r\nimport {View, Text, StyleSheet, SafeAreaView, ScrollView, TouchableOpacity } from 'react-native'\r\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\r\nimport CustomListItem from '../../components/CustomListItem'\r\nimport { auth, db } from '../../services/firebase';\r\nimport {SimpleLineIcons} from '@expo/vector-icons'\r\nimport { Button } from 'react-native';\r\n\r\n\r\nexport default function HomeScreen({ navigation }) {\r\n\r\n    const [chats, setChats] = useState([]);\r\n    const [userInfo, setUserInfo] = useState([])\r\n    const [isDms, setIsDms] = useState(true);\r\n    const [userInfoLoaded, setUserInfoLoaded] = useState(false)\r\n    \r\n  \r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        function unsubscribeDms(){ \r\n            db.collection('chats').onSnapshot(snapshot => {\r\n            snapshot.docs.map(doc => {\r\n                if (doc.data().isDM){\r\n                    if (doc.data().users[0] == auth.currentUser.uid){\r\n                        setChats(chats => [...chats, {id: doc.id, data: doc.data(), otherUser: doc.data().users[1]}])\r\n\r\n                        \r\n                        \r\n                    }\r\n\r\n                    else if (doc.data().users[1] == auth.currentUser.uid){\r\n                        \r\n                        setChats(chats => [...chats, {id: doc.id, data: doc.data(), otherUser: doc.data().users[0]}])\r\n\r\n                    \r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n\r\n            \r\n        })\r\n\r\n        db.collection('users')\r\n        .onSnapshot((snapshot) => setUserInfo(snapshot.docs.map(doc => ({\r\n            uid: doc.id,\r\n            data: doc.data()\r\n        }))))    \r\n        }\r\n\r\n        function unsubscribeGcs(){\r\n            \r\n            \r\n            db.collection('chats').onSnapshot(snapshot => {\r\n                snapshot.docs.map(doc => {\r\n                    if (!doc.data().isDM){\r\n                        \r\n                        var allUsers  = doc.data().chatMembers\r\n                        //console.warn(allUsers)\r\n                       \r\n                        if (allUsers.includes(auth.currentUser.uid)){\r\n                            setChats(chats => [...chats, {id: doc.id, data: doc.data()}])\r\n\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        if (isDms){\r\n            unsubscribeDms()\r\n\r\n        }\r\n\r\n        else {\r\n            unsubscribeGcs()\r\n            \r\n        }\r\n\r\n        \r\n\r\n        \r\n\r\n    }, [isDms])\r\n\r\n    function getphotoUrl(uid){\r\n\r\n        //return JSON.stringify(userInfo[0])\r\n        if (userInfo.length > 0){\r\n            var picInfo = userInfo.filter((value) =>{\r\n                return value.uid == uid\r\n            })[0].data.photoURL\r\n\r\n            \r\n    \r\n            return picInfo\r\n\r\n        }\r\n        else {\r\n            return 'null'\r\n        }\r\n    }\r\n\r\n    function getDisplayName(uid){    \r\n        if (userInfo.length > 0){\r\n            var nameInfo = userInfo.filter((value) =>{\r\n                return value.uid == uid\r\n            })[0].data.displayName\r\n\r\n\r\n            console.log(\"this is the display name\" + nameInfo)\r\n\r\n\r\n\r\n\r\n            return nameInfo\r\n        }\r\n        else {\r\n            return 'null'\r\n        }\r\n\r\n\r\n    }\r\n    \r\n    \r\n\r\n    function signOutUser(){\r\n        auth.signOut().then(() => {\r\n            navigation.replace('Login')\r\n        })\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            title: \"Chats\",          \r\n\r\n            \r\n\r\n            headerRight: () => (\r\n                <View style={{\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    width: 80,\r\n                    marginRight: 20\r\n\r\n                }}>\r\n                    \r\n                <View style={{marginLeft: 20}}>\r\n                    <TouchableOpacity onPress={() => navigation.navigate(\"Profile\", {currentUser: auth.currentUser})} activeOpacity={0.5}>\r\n                        <Avatar rounded source={{ uri: auth?.currentUser?.photoURL }}/>\r\n                    </TouchableOpacity>\r\n                </View>\r\n\r\n                    <TouchableOpacity onPress={() => navigation.navigate(\"AddChat\")}>\r\n                        <SimpleLineIcons name=\"pencil\" size={24} color=\"black\"></SimpleLineIcons>\r\n                    </TouchableOpacity>\r\n\r\n                </View>\r\n            )\r\n\r\n            \r\n\r\n\r\n        });\r\n    }, [navigation])\r\n\r\n    function enterChat(id, chatName, photo, isDm, members, admin){\r\n        navigation.navigate(\"Chat\", {\r\n            id: id,\r\n            chatName: chatName,\r\n            photo: photo,\r\n            isDm: isDm,\r\n            members: members,\r\n            admin: admin\r\n\r\n        })\r\n    }\r\n\r\n    function switchChat(){\r\n        if (isDms){\r\n            setChats([])\r\n            setIsDms(false)\r\n        }\r\n        else {\r\n            setChats([])\r\n            setIsDms(true)\r\n        }\r\n\r\n    }\r\n\r\n    function chatTypeLogic(){\r\n        if (isDms){\r\n            return (\r\n                chats.map(({id, data, otherUser}) => (\r\n                    <CustomListItem key={id} \r\n                    id={id} \r\n                    enterChat={enterChat} \r\n                    photo={getphotoUrl(otherUser)} \r\n                    userName={getDisplayName(otherUser)} \r\n                    isDM={true}\r\n                    members={[auth.currentUser.uid, otherUser]}\r\n                    admin={auth.currentUser.uid}\r\n                    />\r\n                ))\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                chats.map(({id, data}) => (\r\n                \r\n                    <CustomListItem \r\n                        id={id}\r\n                        enterChat={enterChat}\r\n                        photo={data.groupPhoto != undefined? data.groupPhoto : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ4apNLOP0befEKu609F8yvMt_f-f7DVjNElhfMU2svKwmHjTCv7l-FNuor2rnCw33By5s&usqp=CAU\"}\r\n                        userName={data.chatName}\r\n                        isDM={false}\r\n                        members={data.chatMembers}\r\n                        admin={data.admin}\r\n                    />\r\n                ))\r\n\r\n            )\r\n            \r\n\r\n        }\r\n    }\r\n\r\n    \r\n    function ButtonName(){\r\n        if (isDms){\r\n            return \"Groups chats\"\r\n        }\r\n        else {\r\n            return \"Direct Messages\"\r\n        }\r\n    }\r\n   \r\n\r\n    return (\r\n        <SafeAreaView>\r\n            \r\n            <Button title={ButtonName()} onPress={switchChat}/>\r\n            <ScrollView style={styles.container}>\r\n                {chatTypeLogic()}\r\n            </ScrollView>\r\n            \r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: \"100%\"\r\n    }\r\n\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}