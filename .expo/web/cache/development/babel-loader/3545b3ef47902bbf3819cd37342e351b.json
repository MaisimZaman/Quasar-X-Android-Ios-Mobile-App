{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\zmais\\\\OneDrive\\\\Desktop\\\\react-apps\\\\signal-chat\\\\screens\\\\Chat\\\\SendPostMessageScreen.js\";\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\nimport CustomListItem from \"../../components/CustomListItem\";\nimport { auth, db } from \"../../services/firebase\";\nimport { SimpleLineIcons } from '@expo/vector-icons';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ListItem } from 'react-native-elements';\nimport firebase from 'firebase';\nimport { CardItem } from 'native-base';\nimport { Text } from 'react-native-elements';\nexport default function SendPostMessageScreen(props) {\n  var navigation = props.navigation;\n  var _props$route$params = props.route.params,\n      id = _props$route$params.id,\n      posterName = _props$route$params.posterName,\n      PosterId = _props$route$params.PosterId,\n      posterProfilePic = _props$route$params.posterProfilePic,\n      image = _props$route$params.image,\n      caption = _props$route$params.caption,\n      email = _props$route$params.email;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setUserInfo = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDms = _useState6[0],\n      setIsDms = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedChats = _useState8[0],\n      setSelectedChats = _useState8[1];\n\n  useEffect(function () {\n    function unsubscribeDms() {\n      db.collection('chats').onSnapshot(function (snapshot) {\n        snapshot.docs.map(function (doc) {\n          if (doc.data().isDM) {\n            if (doc.data().users[0] == auth.currentUser.uid) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data(),\n                  otherUser: doc.data().users[1]\n                }]);\n              });\n            } else if (doc.data().users[1] == auth.currentUser.uid) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data(),\n                  otherUser: doc.data().users[0]\n                }]);\n              });\n            }\n          }\n        });\n      });\n      db.collection('users').onSnapshot(function (snapshot) {\n        return setUserInfo(snapshot.docs.map(function (doc) {\n          return {\n            uid: doc.id,\n            data: doc.data()\n          };\n        }));\n      });\n    }\n\n    function unsubscribeGcs() {\n      db.collection('chats').onSnapshot(function (snapshot) {\n        snapshot.docs.map(function (doc) {\n          if (!doc.data().isDM) {\n            var allUsers = doc.data().chatMembers;\n\n            if (allUsers.includes(auth.currentUser.uid)) {\n              setChats(function (chats) {\n                return [].concat(_toConsumableArray(chats), [{\n                  id: doc.id,\n                  data: doc.data()\n                }]);\n              });\n            }\n          }\n        });\n      });\n    }\n\n    if (isDms) {\n      unsubscribeDms();\n    } else {\n      unsubscribeGcs();\n    }\n  }, [isDms]);\n\n  function getphotoUrl(uid) {\n    if (userInfo.length > 0) {\n      var picInfo = userInfo.filter(function (value) {\n        return value.uid == uid;\n      })[0].data.photoURL;\n      return picInfo;\n    } else {\n      return 'null';\n    }\n  }\n\n  function getDisplayName(uid) {\n    if (userInfo.length > 0) {\n      var nameInfo = userInfo.filter(function (value) {\n        return value.uid == uid;\n      })[0].data.displayName;\n      console.log(\"this is the display name\" + nameInfo);\n      return nameInfo;\n    } else {\n      return 'null';\n    }\n  }\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: \"Share Post\"\n    });\n  }, [navigation]);\n\n  function switchChat() {\n    if (isDms) {\n      setChats([]);\n      setIsDms(false);\n    } else {\n      setChats([]);\n      setIsDms(true);\n    }\n  }\n\n  function addChatToShareBox(chatId) {\n    if (!selectedChats.includes(chatId)) {\n      setSelectedChats(function (selectedChats) {\n        return [].concat(_toConsumableArray(selectedChats), [chatId]);\n      });\n    } else {\n      for (var i = 0; i < selectedChats.length; i++) {\n        if (selectedChats[i] === chatId) {\n          setSelectedChats(function (selectedChats) {\n            return _toConsumableArray(selectedChats).splice(i);\n          });\n        }\n      }\n    }\n  }\n\n  function sendPostMessage() {\n    function sharePost(chatId) {\n      db.collection('chats').doc(chatId).collection('messages').add({\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        isSharePost: true,\n        postInfo: {\n          id: id,\n          posterName: posterName,\n          PosterId: PosterId,\n          posterProfilePic: posterProfilePic,\n          image: image,\n          caption: caption,\n          email: email\n        },\n        displayName: auth.currentUser.displayName,\n        email: auth.currentUser.email,\n        photoURL: auth.currentUser.photoURL\n      });\n    }\n\n    selectedChats.forEach(sharePost);\n    navigation.goBack();\n  }\n\n  function chatTypeLogic() {\n    var _this = this;\n\n    if (isDms) {\n      return chats.map(function (_ref) {\n        var id = _ref.id,\n            data = _ref.data,\n            otherUser = _ref.otherUser;\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return addChatToShareBox(id);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }\n        }, React.createElement(View, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }\n        }, React.createElement(CardItem, {\n          key: id,\n          bottomDivider: true,\n          style: selectedChats.includes(id) ? {\n            backgroundColor: \"#00FF00\"\n          } : {\n            backgroundColor: \"white\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }\n        }, React.createElement(Avatar, {\n          rounded: true,\n          source: {\n            uri: getphotoUrl(otherUser)\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 33\n          }\n        }), React.createElement(ListItem.Content, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 33\n          }\n        }, React.createElement(ListItem.Title, {\n          style: {\n            fontWeight: \"800\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 37\n          }\n        }, getDisplayName(otherUser))))));\n      });\n    } else {\n      return chats.map(function (_ref2) {\n        var id = _ref2.id,\n            data = _ref2.data;\n        return React.createElement(TouchableOpacity, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }\n        }, React.createElement(View, {\n          style: {\n            backgroundColor: \"green\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }\n        }, React.createElement(ListItem, {\n          key: id,\n          bottomDivider: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }\n        }, React.createElement(Avatar, {\n          rounded: true,\n          source: {\n            uri: data.photo\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }\n        }), React.createElement(ListItem.Content, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 33\n          }\n        }, React.createElement(ListItem.Title, {\n          style: {\n            fontWeight: \"800\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 37\n          }\n        }, data.userName)))));\n      });\n    }\n  }\n\n  function ButtonName() {\n    if (isDms) {\n      return \"Groups chats\";\n    } else {\n      return \"Direct Messages\";\n    }\n  }\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"Pick a Chat to share with\"), React.createElement(Button, {\n    title: \"Send\",\n    onPress: sendPostMessage,\n    disabled: selectedChats.length == 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }), React.createElement(ScrollView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, chatTypeLogic()), React.createElement(Button, {\n    title: ButtonName(),\n    onPress: switchChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/zmais/OneDrive/Desktop/react-apps/signal-chat/screens/Chat/SendPostMessageScreen.js"],"names":["React","useEffect","useLayoutEffect","useState","Avatar","CustomListItem","auth","db","SimpleLineIcons","ListItem","firebase","CardItem","Text","SendPostMessageScreen","props","navigation","route","params","id","posterName","PosterId","posterProfilePic","image","caption","email","chats","setChats","userInfo","setUserInfo","isDms","setIsDms","selectedChats","setSelectedChats","unsubscribeDms","collection","onSnapshot","snapshot","docs","map","doc","data","isDM","users","currentUser","uid","otherUser","unsubscribeGcs","allUsers","chatMembers","includes","getphotoUrl","length","picInfo","filter","value","photoURL","getDisplayName","nameInfo","displayName","console","log","setOptions","title","switchChat","addChatToShareBox","chatId","i","splice","sendPostMessage","sharePost","add","timestamp","firestore","FieldValue","serverTimestamp","isSharePost","postInfo","forEach","goBack","chatTypeLogic","backgroundColor","uri","fontWeight","photo","userName","ButtonName","styles","container","StyleSheet","create","height"],"mappings":"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","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react'\r\nimport {View,  StyleSheet, SafeAreaView, ScrollView, TouchableOpacity } from 'react-native'\r\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\r\nimport CustomListItem from '../../components/CustomListItem'\r\nimport { auth, db } from '../../services/firebase';\r\nimport {SimpleLineIcons} from '@expo/vector-icons'\r\nimport { Button } from 'react-native';\r\nimport { ListItem } from 'react-native-elements'\r\nimport firebase from 'firebase';\r\nimport { CardItem } from 'native-base';\r\nimport { Text } from 'react-native-elements';\r\n\r\n\r\n\r\nexport default function SendPostMessageScreen(props) {\r\n\r\n    const navigation = props.navigation \r\n\r\n    const {id,posterName, PosterId, posterProfilePic, image,caption,  email} = props.route.params;\r\n\r\n    const [chats, setChats] = useState([]);\r\n    const [userInfo, setUserInfo] = useState([])\r\n    const [isDms, setIsDms] = useState(true);\r\n    const [selectedChats, setSelectedChats] = useState([])\r\n\r\n    useEffect(() => {\r\n        function unsubscribeDms(){ \r\n            db.collection('chats').onSnapshot(snapshot => {\r\n            snapshot.docs.map(doc => {\r\n                if (doc.data().isDM){\r\n                    if (doc.data().users[0] == auth.currentUser.uid){\r\n                        setChats(chats => [...chats, {id: doc.id, data: doc.data(), otherUser: doc.data().users[1]}])\r\n\r\n                        \r\n                        \r\n                    }\r\n\r\n                    else if (doc.data().users[1] == auth.currentUser.uid){\r\n                        \r\n                        setChats(chats => [...chats, {id: doc.id, data: doc.data(), otherUser: doc.data().users[0]}])\r\n\r\n                    \r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n\r\n            \r\n        })\r\n\r\n        db.collection('users')\r\n        .onSnapshot((snapshot) => setUserInfo(snapshot.docs.map(doc => ({\r\n            uid: doc.id,\r\n            data: doc.data()\r\n        }))))    \r\n        }\r\n\r\n        function unsubscribeGcs(){\r\n            \r\n            \r\n            db.collection('chats').onSnapshot(snapshot => {\r\n                snapshot.docs.map(doc => {\r\n                    if (!doc.data().isDM){\r\n                        \r\n                        var allUsers  = doc.data().chatMembers\r\n                        //console.warn(allUsers)\r\n                       \r\n                        if (allUsers.includes(auth.currentUser.uid)){\r\n                            setChats(chats => [...chats, {id: doc.id, data: doc.data()}])\r\n\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        if (isDms){\r\n            unsubscribeDms()\r\n\r\n        }\r\n\r\n        else {\r\n            unsubscribeGcs()\r\n            \r\n        }\r\n\r\n        \r\n\r\n        \r\n\r\n    }, [isDms])\r\n\r\n    function getphotoUrl(uid){\r\n\r\n        //return JSON.stringify(userInfo[0])\r\n        if (userInfo.length > 0){\r\n            var picInfo = userInfo.filter((value) =>{\r\n                return value.uid == uid\r\n            })[0].data.photoURL\r\n\r\n            \r\n    \r\n            return picInfo\r\n\r\n        }\r\n        else {\r\n            return 'null'\r\n        }\r\n    }\r\n\r\n    function getDisplayName(uid){    \r\n        if (userInfo.length > 0){\r\n            var nameInfo = userInfo.filter((value) =>{\r\n                return value.uid == uid\r\n            })[0].data.displayName\r\n\r\n\r\n            console.log(\"this is the display name\" + nameInfo)\r\n\r\n\r\n\r\n\r\n            return nameInfo\r\n        }\r\n        else {\r\n            return 'null'\r\n        }\r\n\r\n\r\n    }\r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n    useLayoutEffect(() => {\r\n        navigation.setOptions({\r\n            title: \"Share Post\",          \r\n        });\r\n    }, [navigation])\r\n\r\n\r\n    function switchChat(){\r\n        if (isDms){\r\n            setChats([])\r\n            setIsDms(false)\r\n        }\r\n        else {\r\n            setChats([])\r\n            setIsDms(true)\r\n        }\r\n\r\n    }\r\n\r\n    function addChatToShareBox(chatId){\r\n        if (!selectedChats.includes(chatId)){\r\n            setSelectedChats(selectedChats => [...selectedChats, chatId])\r\n\r\n        }\r\n        else {\r\n            for( var i = 0; i < selectedChats.length; i++){ \r\n                                   \r\n                if ( selectedChats[i] === chatId) { \r\n                    setSelectedChats(selectedChats => [...selectedChats].splice(i))\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function sendPostMessage(){\r\n        \r\n        function sharePost(chatId){\r\n            db.collection('chats')\r\n            .doc(chatId)\r\n            .collection('messages')\r\n            .add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                isSharePost: true,\r\n                postInfo: {id: id, posterName: posterName, PosterId: PosterId, posterProfilePic: posterProfilePic, image: image,caption: caption, email: email},\r\n                displayName: auth.currentUser.displayName,\r\n                email: auth.currentUser.email,\r\n                photoURL: auth.currentUser.photoURL,\r\n            })\r\n\r\n        }\r\n\r\n        selectedChats.forEach(sharePost)\r\n\r\n        navigation.goBack()\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    function chatTypeLogic(){\r\n        if (isDms){\r\n            return (\r\n                chats.map(({id, data, otherUser}) => (\r\n                    <TouchableOpacity onPress={() => addChatToShareBox(id)}>\r\n                        <View>\r\n                            <CardItem key={id} bottomDivider style={selectedChats.includes(id) ? {backgroundColor: \"#00FF00\"} : {backgroundColor: \"white\"}}>\r\n                                <Avatar \r\n                                    rounded\r\n                                    source={{\r\n                                        uri: getphotoUrl(otherUser)\r\n                                    }}\r\n                                />\r\n                                <ListItem.Content >\r\n                                    <ListItem.Title style={{fontWeight: \"800\"}}>\r\n                                        {getDisplayName(otherUser)}\r\n                                    </ListItem.Title>\r\n                \r\n                                </ListItem.Content>\r\n                                \r\n                            </CardItem>\r\n                        </View>\r\n\r\n\r\n                    </TouchableOpacity>\r\n\r\n                \r\n                ))\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                chats.map(({id, data}) => (\r\n                \r\n                    <TouchableOpacity >\r\n                        <View style={{backgroundColor: \"green\"}}>\r\n                            <ListItem key={id} bottomDivider>\r\n                                <Avatar \r\n                                    rounded\r\n                                    source={{\r\n                                        uri: data.photo\r\n                                    }}\r\n                                />\r\n                                <ListItem.Content>\r\n                                    <ListItem.Title style={{fontWeight: \"800\"}}>\r\n                                        {data.userName}\r\n                                    </ListItem.Title>\r\n                \r\n                                </ListItem.Content>\r\n                            </ListItem>\r\n                        </View>\r\n\r\n\r\n                    </TouchableOpacity>\r\n                ))\r\n\r\n            )\r\n            \r\n\r\n        }\r\n    }\r\n\r\n    \r\n    function ButtonName(){\r\n        if (isDms){\r\n            return \"Groups chats\"\r\n        }\r\n        else {\r\n            return \"Direct Messages\"\r\n        }\r\n    }\r\n   \r\n\r\n    return (\r\n        <SafeAreaView>\r\n\r\n            <Text h3>Pick a Chat to share with</Text>\r\n            \r\n            <Button title=\"Send\" onPress={sendPostMessage} disabled={selectedChats.length == 0}></Button>\r\n            \r\n            <ScrollView style={styles.container}>\r\n                {chatTypeLogic()}\r\n            </ScrollView>\r\n\r\n            <Button title={ButtonName()} onPress={switchChat}/>\r\n\r\n            \r\n\r\n            \r\n            \r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: \"100%\"\r\n    }\r\n\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}